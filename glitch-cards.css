/* ===== Drop-in: Glitch Image + Responsive Cards =====
   Author: ChatGPT for Axel (aujl)
   Purpose: No-path, no-asset dependencies. Just include this CSS and the JS file.
   Files: glitch-cards.css (this), glitchify.js
   Notes: Uses inline data-URI noise; no external images required for effects.
======================================================================= */

/* ---------- CSS Variables (tweak if desired) ---------- */
:root {
  --gc-card-bg: rgba(8, 10, 14, 0.6);
  --gc-card-text: #e7eefc;
  --gc-link: #7cc0ff;
  --gc-radius: 14px;
  --gc-gap: 2rem;
  --gc-shadow: 0 10px 30px rgba(0,0,0,0.25);
  --gc-border: 1px solid rgba(255,255,255,0.08);
  /* default portrait vertical alignment tweak (positive moves content down) */
  --portrait-shift: -50px;
}

/* ---------- Glitch base styles (JS will add structure) ---------- */
.gc-glitch-wrap {
  position: relative;
  display: inline-block;
  max-width: min(90vw, 640px);
  width: 100%;
  height: 100%;
  filter: contrast(1.12) saturate(1.08);
  will-change: transform, filter, opacity;
}
.gc-glitch-canvas,
.gc-glitch-layer {
  position: absolute;
  inset: 0;
  pointer-events: none;
}
.gc-glitch-img {
  display: block;
  width: 100%;
  height: auto;
}

/* Base layer (NFT) - No mirroring for NFT */
.gc-glitch-wrap > .gc-glitch-img:not(.gc-layer-mirror),
.gc-glitch-wrap .gc-glitch-layer:not(.gc-layer-mirror) {
  transform: none !important;
}

/* Mirrored layer - Only for portrait */
.gc-layer-mirror,
.gc-portrait-effects .gc-glitch-layer {
  position: absolute;
  inset: 0;
  transform: scaleX(-1);
  opacity: 1;  /* Make mirrored layers visible by default */
  /* animation is controlled from JS to allow synced/random behaviour */
  animation: none;
  transition: opacity 140ms ease;
  width: 100%;
  height: 100%;
  object-fit: cover;
  pointer-events: none;
  z-index: 6;
}

/* When portrait is actively shown (overlay or replace) */
.gc-layer-mirror.show {
  opacity: 0.52;
  transition: opacity 120ms linear;
}

/* Utility to fully hide the NFT layer when portrait replaces it */
.gc-hidden {
  opacity: 0 !important;
  transition: opacity 120ms linear !important;
}

/* Intensified flicker for the short portrait events (faster, more visible) */
.gc-flicker.gc-intense {
  animation-duration: .36s !important;
}

/* Portrait-specific effect container (created by JS) */
.gc-portrait-effects {
  position: absolute;
  inset: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  opacity: 0;               /* hidden by default */
  visibility: hidden;       /* hidden by default */
  z-index: 7;
  display: block;
  transition: opacity 160ms ease, visibility 0s linear 160ms;
  overflow: hidden;         /* crop bottom when shifting */
}

/* Shown intermittently when JS toggles the event */
.gc-portrait-effects.active {
  opacity: 0.65;         /* reduced opacity during display */
  visibility: visible;
  transition: opacity 140ms ease;
}

/* When replacing, hide all NFT layers (non-mirror) inside the wrap */
.gc-glitch-wrap.gc-replacing > .gc-glitch-img,
.gc-glitch-wrap.gc-replacing > .gc-grain,
.gc-glitch-wrap.gc-replacing > .gc-scanlines,
.gc-glitch-wrap.gc-replacing > .gc-glitch-layer:not(.gc-layer-mirror) {
  opacity: 0 !important;
  transition: opacity 120ms linear !important;
}

/* portrait channels and slices should follow same rules as original layers */
.gc-portrait-effects .gc-glitch-layer {
  position: absolute;
  inset: 0;
  pointer-events: none;
}

/* Shift portrait content down slightly to align eyes; crop overflow at bottom */
.gc-portrait-effects .gc-glitch-base,
.gc-portrait-effects .gc-glitch-layer {
  object-position: center calc(50% - var(--portrait-shift, 8px));
}

/* Ensure portrait channel opacities match base NFT channels */
/* (Use the same .gc-layer-r/g/b rule below for both) */

/* grain overlay (data-URI is injected by JS as background-image) */
.gc-grain {
  position: absolute;
  inset: 0;
  mix-blend-mode: overlay;
  opacity: .08;
  pointer-events: none;
}

/* scanline stripes */
.gc-scanlines {
  position: absolute;
  inset: 0;
  background-image: repeating-linear-gradient(
    to bottom,
    rgba(255,255,255,0.05) 0px,
    rgba(255,255,255,0.05) 1px,
    rgba(0,0,0,0) 2px,
    rgba(0,0,0,0) 3px
  );
  opacity: .25;
  pointer-events: none;
}

/* flicker animation */
@keyframes gc-flicker {
  0%, 100% { opacity: 1; filter: none; }
  8%  { opacity: .85; filter: blur(.4px) brightness(1.05); }
  12% { opacity: .7; filter: blur(1px) contrast(1.1); }
  16% { opacity: .95; filter: none; }
  22% { opacity: .6; filter: blur(1.6px) brightness(1.15); }
  28% { opacity: .92; filter: none; }
  35% { opacity: .75; filter: blur(.8px) contrast(1.05); }
  45% { opacity: 1; filter: none; }
  62% { opacity: .8; filter: blur(.6px) saturate(1.05); }
  75% { opacity: .95; filter: none; }
}
.gc-flicker {
  animation: gc-flicker .7s infinite steps(2, end);
}

/* RGB channel splits for glitch */
.gc-layer-r, .gc-layer-g, .gc-layer-b {
  mix-blend-mode: screen;
  opacity: .6;
}
.gc-layer-r { filter: drop-shadow(1px 0 0 rgba(255,0,0,0.6)); }
.gc-layer-g { filter: drop-shadow(-1px 0 0 rgba(0,255,0,0.6)); }
.gc-layer-b { filter: drop-shadow(0 0 0 rgba(0,0,255,0.6)); }

/* slice jitter (applied to each slice) */
@keyframes gc-jitter-x {
  0%   { transform: translateX(0); }
  33%  { transform: translateX(-2px); }
  66%  { transform: translateX(2px); }
  100% { transform: translateX(0); }
}
@keyframes gc-jitter-y {
  0%   { transform: translateY(0); }
  50%  { transform: translateY(-1px); }
  100% { transform: translateY(0); }
}

/* Mirrored variants preserve scaleX(-1) during jitter animations */
@keyframes gc-jitter-x-mirror {
  0%   { transform: scaleX(-1) translateX(0); }
  33%  { transform: scaleX(-1) translateX(-2px); }
  66%  { transform: scaleX(-1) translateX(2px); }
  100% { transform: scaleX(-1) translateX(0); }
}
@keyframes gc-jitter-y-mirror {
  0%   { transform: scaleX(-1) translateY(0); }
  50%  { transform: scaleX(-1) translateY(-1px); }
  100% { transform: scaleX(-1) translateY(0); }
}

/* Reduced motion */
@media (prefers-reduced-motion: reduce) {
  .gc-flicker { animation: none; }
  .gc-layer-slice { animation: none !important; }
}

/* Hide the original inline portrait image until JS builds mirrored layers */
.hero__image > img.gc-layer-mirror { display: none !important; }

/* ---------- Responsive Cards (targets common section names) ---------- */
.gc-cards, .cards, .projects, .services, .highlights {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(min(100%, 280px), 1fr));
  gap: var(--r, var(--gc-gap));
  align-items: stretch;
}
.gc-card, .card:not(.flip), .project, .service, .highlight {
  background: var(--gc-card-bg);
  color: var(--gc-card-text);
  border-radius: var(--gc-radius);
  border: var(--gc-border);
  padding: 1.25rem;
  box-shadow: var(--gc-shadow);
  transition: transform .25s ease, box-shadow .25s ease, border-color .25s ease;
  display: flex;
  flex-direction: column;
  min-height: 0;
  backdrop-filter: blur(6px);
}
.gc-card:hover, .card:not(.flip):hover, .project:hover, .service:hover, .highlight:hover {
  transform: translateY(-4px);
  box-shadow: 0 16px 40px rgba(0,0,0,.35);
  border-color: rgba(255,255,255,0.16);
}
.gc-card h3, .card:not(.flip) h3, .project h3, .service h3, .highlight h3 {
  margin: 0 0 .6rem 0;
  font-size: clamp(1.05rem, 1.6vw, 1.3rem);
}
.gc-card p, .card:not(.flip) p, .project p, .service p, .highlight p {
  margin: 0 0 .75rem 0;
  line-height: 1.45;
  opacity: .92;
  flex: 1 1 auto;
}
.gc-card a, .card:not(.flip) a, .project a, .service a, .highlight a {
  align-self: flex-start;
  text-decoration: none;
  color: var(--gc-link);
  font-weight: 600;
}

/* images inside cards */
.gc-card img, .card:not(.flip) img, .project img, .service img, .highlight img {
  width: 100%;
  height: auto;
  border-radius: calc(var(--gc-radius) - 4px);
  margin-bottom: .8rem;
  display: block;
}

/* small screens tweaks */
@media (max-width: 480px) {
  :root { --gc-gap: 1.25rem; }
  .gc-card, .card:not(.flip), .project, .service, .highlight { padding: 1rem; }
}

/* ===== Overrides: ensure parity + interleaved flicker ===== */
/* Interleave flicker phases between NFT (wrap) and portrait (effects) */
.gc-glitch-wrap .gc-flicker { animation-delay: 0s; }
.gc-portrait-effects .gc-flicker { animation-delay: .35s; }

/* Keep grain and scanlines above slices/channels for both NFT and portrait */
.gc-grain { z-index: 8; }
.gc-scanlines { z-index: 11; }

/* ---------- 3D Flip + Pixel Reveal Cards (opt-in) ---------- */
/* Usage: <article class="card flip"> ... structure ... */
.card.flip{ perspective: 1200px; -webkit-perspective: 1200px; position: relative; }
.card.flip{ padding:0 !important; background: transparent !important; border:none !important; box-shadow:none !important; display:block !important; }
.card.flip{ backdrop-filter: none !important; }
.card.flip:hover{ transform:none !important; box-shadow:none !important; }
.card.flip .card__inner{
  position:relative; height:100%; transform-style:preserve-3d;
  -webkit-transform-style:preserve-3d;
  transition: transform .6s cubic-bezier(.2,.7,.2,1);
  transition-delay: 0s;
  border:1px solid rgba(255,255,255,.08);
  border-radius: 14px;
  background: linear-gradient(180deg, rgba(255,255,255,.04), rgba(255,255,255,.02));
  box-shadow: var(--shadow, 0 6px 24px rgba(0,0,0,.18));
  overflow:hidden;
  min-height: 240px;
  will-change: transform;
}
/* Face-only rotation (no parent rotate) */
.card.flip .card__inner{ transition: transform .6s cubic-bezier(.2,.7,.2,1); will-change: transform; }
.card.flip:hover .card__inner,
.card.flip.is-flipped .card__inner{ transform: none; }
.card.flip .card__face{
  position:absolute; inset:0; padding:1.2rem;
  backface-visibility:hidden; -webkit-backface-visibility:hidden;
  display:flex; flex-direction:column; gap:.7rem; justify-content:space-between;
  width:100%; height:100%;
  background: linear-gradient(180deg, rgba(255,255,255,.04), rgba(255,255,255,.02));
  color: var(--gc-card-text, #e7eefc);
  -webkit-text-fill-color: currentColor;
  z-index: 2;
  mix-blend-mode: normal !important;
  filter: none !important;
}
.card.flip .card__face--front{
  /* match back gradient to avoid visual flush on return */
  background:
    radial-gradient(120% 80% at 80% 100%, rgba(255,0,120,.14), transparent 60%),
    linear-gradient(180deg, rgba(255,255,255,.04), rgba(255,255,255,.02));
}
.card.flip .card__face--back{
  /* magenta-ish glow like test2 */
  background:
    radial-gradient(120% 80% at 80% 100%, rgba(255,0,120,.14), transparent 60%),
    linear-gradient(180deg, rgba(255,255,255,.04), rgba(255,255,255,.02));
}
.card.flip .card__face *{ color: inherit; -webkit-text-fill-color: currentColor; }
.card.flip .card__face--front{ transform: rotateY(0deg) translateZ(1px); transition: transform .6s cubic-bezier(.2,.7,.2,1); }
.card.flip .card__face--back{ transform: rotateY(180deg) translateZ(1px); transition: transform .6s cubic-bezier(.2,.7,.2,1); }
.card.flip:hover .card__face--front,
.card.flip.is-flipped .card__face--front{ transform: rotateY(180deg) translateZ(1px); }
.card.flip:hover .card__face--back,
.card.flip.is-flipped .card__face--back{ transform: rotateY(0deg) translateZ(1px); }

/* Ensure readable back content regardless of inherited styles */
.card.flip .card__face h3 { color: #e7eefc; margin: 0 0 .4rem 0; }
.card.flip .card__face p { color: rgba(231,238,252,.85); margin: 0 0 .6rem 0; }
.card.flip .card__face a { color: #7cc0ff; font-weight: 600; }

/* Front face presentation for symbol + label */
.card.flip .card__face--front{ align-items:center; justify-content:center; text-align:center; gap:.8rem; }
.card.flip .card__symbol{ line-height:1; display:grid; place-items:center; color:#a8c8ff; }
.card.flip .card__symbol svg{ width: clamp(36px, 6vw, 64px); height: clamp(36px, 6vw, 64px); fill: currentColor; }
.card.flip .card__label{ opacity:.9; letter-spacing:.02em; align-self: center; }

/* Pixel reveal (progressive enhancement) */
.card.pixel .card__inner::after{
  content:""; position:absolute; inset:0;
  background:
    linear-gradient(transparent 0 49%, rgba(255,255,255,.05) 50% 51%, transparent 52% 100%),
    repeating-linear-gradient(90deg, rgba(255,255,255,.04) 0 1px, transparent 1px 4px);
  mix-blend-mode: overlay; opacity:0; transition: opacity .4s ease; z-index: 1; pointer-events:none;
}
.card.pixel:hover .card__inner::after{ opacity:1 }
.card.flip:hover .card__inner::after,
.card.flip.is-flipped .card__inner::after{ opacity:0; }

.card.pixel .card__face--front{ clip-path: inset(0); transition: clip-path .5s steps(6, end); }
.card.pixel:hover .card__face--front{ clip-path: inset(44% 0 0 0); }
